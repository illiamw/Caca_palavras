{"ast":null,"code":"import React from 'react';\nimport Data from '../conteudo/palavras08102019';\nexport default class Construtor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.colunas = props.colunas;\n    this.linhas = props.linhas;\n    this.tentativas = this.vetorPosibilidades();\n    this.gabarito = Array(this.colunas * this.linhas).fill(0);\n    console.log(this.tentativas.sort());\n    console.log(this.gabarito);\n  }\n\n  criandoLevel(col, lin) {\n    this.state.colunas = col;\n    this.state.linhas = lin;\n  }\n\n  testOcupa(rot, possibilidade, palavra) {\n    switch (rot) {\n      case 0:\n        //horizontal\n        if (possibilidade + palavra.length > this.colunas * this.linhas) return false;\n        let finalposicao = palavra.length + possibilidade;\n        let inicialposicao = possibilidade;\n        console.log(finalposicao + \"  \" + inicialposicao);\n\n        for (let index = inicialposicao; index < finalposicao; index++) {\n          if (this.gabarito[index] != 0) return true;\n          console.log(this.gabarito[index]);\n        }\n\n        console.log(\"--------------------------é pra colocar\");\n\n        for (let index = inicialposicao; index < finalposicao; index++) {\n          this.gabarito[index] = palavra[index - possibilidade];\n          console.log(palavra[index - possibilidade]);\n        }\n\n        this.tentativas.pop();\n        console.log(\"------------------------ Colocou -------------------------\");\n        return false;\n        break;\n\n      case 1:\n        //vertical\n        break;\n\n      case 2:\n        //diagonal\n        break;\n\n      default:\n        console.log(\"Erro de rotação\");\n    } //Manter o loop\n\n\n    return true;\n  }\n\n  setPosicao(palavra, rot, possibilidade) {\n    switch (rot) {\n      case 0:\n        //horizontal\n        let espaco = this.colunas - possibilidade % this.linhas;\n        console.log(rot + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa col \" + this.colunas + \"  possibilidade \" + possibilidade + \"  lin \" + this.linhas + \"  esp \" + espaco);\n\n        if (palavra.length <= espaco) {\n          console.log(\"cabe \" + palavra.length);\n          return this.testOcupa(rot, possibilidade, palavra);\n        }\n\n        break;\n\n      case 1:\n        //vertical\n        break;\n\n      case 2:\n        //diagonal\n        break;\n\n      default:\n        console.log(\"Erro de rotação\");\n    } //Manter o loop\n\n\n    return true;\n  }\n\n  geradorGabarito() {\n    var palavra;\n    var possibilidade = 0;\n    var rot = -1;\n    var percorrer = 0;\n\n    for (let index = 0; index <= 6; index++) {\n      do {\n        palavra = this.selecionarPalavras();\n        if (rot >= 2) rot = 0;else rot++;\n        possibilidade = this.tentativas[this.tentativas.length - percorrer];\n        percorrer++;\n        console.log(\"loop \" + rot);\n      } while (this.setPosicao(palavra, rot, possibilidade) == true && percorrer < this.tentativas.length);\n\n      console.log(\"index -------------------------------- \" + index);\n      percorrer = 0;\n    }\n\n    console.log(this.gabarito);\n    return this.gabarito;\n  }\n\n  vetorPosibilidades() {\n    var tam = this.colunas * this.linhas;\n    console.log(this.linhas);\n    var posicoes = Array(tam);\n\n    for (let i = 0; i < tam; i++) posicoes[i] = i;\n\n    let aux = 0,\n        ind1,\n        ind2;\n\n    for (let i = 0; i < tam; i++) {\n      ind1 = Math.floor(Math.random() * tam);\n      ind2 = Math.floor(Math.random() * tam);\n      aux = posicoes[ind1];\n      posicoes[ind1] = posicoes[ind2];\n      posicoes[ind2] = aux;\n    }\n\n    console.log(posicoes);\n    return posicoes;\n  }\n\n  selecionarPalavras() {\n    console.log(this.props.colunas);\n    var palavra;\n    var MAX = this.props.colunas;\n    var len = this.props.colunas + 1;\n    var index = 0;\n\n    while (len > MAX) {\n      palavra = Data[Math.floor(Math.random() * Data.length)][\"Resposta\"];\n      len = palavra[index].length;\n      index++;\n    }\n\n    console.log(palavra);\n    return palavra;\n  }\n  /**\r\n   * @description geração Aleatória de letras \r\n   * @returns {Char} \"c\"\r\n   */\n\n\n  geradorChar(value) {\n    console.log(\"olha só\");\n    var alfabeto = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    var conteudo = Array(value);\n\n    for (let index = 0; index < value; index++) {\n      conteudo[index] = alfabeto[Math.floor(Math.random() * alfabeto.length)];\n    }\n\n    for (let index = 0; index < conteudo.length; index++) {\n      if (this.gabarito != 0) conteudo[index] = this.gabarito[index];\n    }\n\n    return conteudo;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/EIC/Documents/Caca_palavras/src/Componentes/Construtor.js"],"names":["React","Data","Construtor","Component","constructor","props","colunas","linhas","tentativas","vetorPosibilidades","gabarito","Array","fill","console","log","sort","criandoLevel","col","lin","state","testOcupa","rot","possibilidade","palavra","length","finalposicao","inicialposicao","index","pop","setPosicao","espaco","geradorGabarito","percorrer","selecionarPalavras","tam","posicoes","i","aux","ind1","ind2","Math","floor","random","MAX","len","geradorChar","value","alfabeto","conteudo"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Data from '../conteudo/palavras08102019';\r\nexport default class Construtor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.colunas = props.colunas;\r\n        this.linhas = props.linhas;\r\n        this.tentativas = this.vetorPosibilidades();\r\n        this.gabarito = Array(this.colunas * this.linhas).fill(0)\r\n        console.log(this.tentativas.sort());\r\n        console.log(this.gabarito);\r\n    }\r\n    criandoLevel(col, lin) {\r\n        this.state.colunas = col;\r\n        this.state.linhas = lin;\r\n    }\r\n\r\n    testOcupa(rot,possibilidade,palavra){\r\n        switch (rot) {\r\n            case 0:\r\n                //horizontal\r\n                if(possibilidade+palavra.length > this.colunas*this.linhas) return false;\r\n                let finalposicao = palavra.length + possibilidade;\r\n                let inicialposicao = possibilidade;\r\n                console.log(finalposicao+\"  \"+inicialposicao);\r\n                for (let index = inicialposicao; index < finalposicao; index++) {if(this.gabarito[index] != 0) return true;  console.log(this.gabarito[index]); }                 \r\n                console.log(\"--------------------------é pra colocar\");\r\n                \r\n                for (let index = inicialposicao; index < finalposicao; index++) {\r\n                    this.gabarito[index] = palavra[index-possibilidade];\r\n                    console.log(palavra[index-possibilidade]);\r\n                }\r\n                this.tentativas.pop();\r\n                console.log(\"------------------------ Colocou -------------------------\");\r\n                return false;\r\n                \r\n\r\n                break;\r\n            case 1:\r\n                //vertical\r\n                break;\r\n            case 2:\r\n                //diagonal\r\n                break;\r\n            default:\r\n                console.log(\"Erro de rotação\");               \r\n\r\n        }\r\n        //Manter o loop\r\n        return true;\r\n    }\r\n\r\n    setPosicao(palavra, rot, possibilidade) {\r\n        switch (rot) {\r\n            case 0:\r\n                //horizontal\r\n                let espaco = this.colunas - possibilidade % this.linhas;\r\n                console.log(rot + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa col \" + this.colunas + \"  possibilidade \" + possibilidade + \"  lin \" + this.linhas + \"  esp \" + espaco);\r\n\r\n                if (palavra.length <= espaco) {\r\n                    console.log(\"cabe \"+ palavra.length);\r\n                    \r\n                    return this.testOcupa(rot,possibilidade,palavra);\r\n                    \r\n                }\r\n                break;\r\n            case 1:\r\n                //vertical\r\n                break;\r\n            case 2:\r\n                //diagonal\r\n                break;\r\n            default:\r\n                console.log(\"Erro de rotação\");\r\n\r\n                \r\n        }\r\n        //Manter o loop\r\n        return true;\r\n\r\n    }\r\n    geradorGabarito() {\r\n        var palavra;\r\n        var possibilidade = 0;\r\n        var rot = -1;\r\n        var percorrer = 0;\r\n\r\n        for (let index = 0; index <= 6; index++) {\r\n            do {\r\n                palavra = this.selecionarPalavras();\r\n                if (rot >= 2) rot = 0;\r\n                else rot++;\r\n                possibilidade = this.tentativas[this.tentativas.length-percorrer];\r\n                percorrer++;\r\n                console.log(\"loop \" +rot);\r\n            } while (this.setPosicao(palavra, rot, possibilidade)==true && percorrer <this.tentativas.length);\r\n            console.log(\"index -------------------------------- \" +index);\r\n            percorrer = 0;\r\n        }\r\n        console.log(this.gabarito );\r\n        return this.gabarito;\r\n    }\r\n\r\n    vetorPosibilidades() {\r\n        var tam = this.colunas * this.linhas;\r\n        console.log(this.linhas);\r\n        var posicoes = Array(tam);\r\n        for (let i = 0; i < tam; i++) posicoes[i] = i;\r\n        let aux = 0, ind1, ind2;\r\n        for (let i = 0; i < tam; i++) {\r\n            ind1 = Math.floor(Math.random() * tam);\r\n            ind2 = Math.floor(Math.random() * tam);\r\n            aux = posicoes[ind1];\r\n            posicoes[ind1] = posicoes[ind2];\r\n            posicoes[ind2] = aux;\r\n        }\r\n        console.log(posicoes);\r\n        return posicoes;\r\n    }\r\n\r\n\r\n    selecionarPalavras() {\r\n        console.log(this.props.colunas);\r\n        var palavra;\r\n        var MAX = this.props.colunas;\r\n        var len = this.props.colunas + 1;\r\n        var index = 0;\r\n        while (len > MAX) {\r\n            palavra = Data[Math.floor(Math.random() * Data.length)][\"Resposta\"];\r\n            len = palavra[index].length;\r\n            index++;\r\n        }\r\n\r\n        console.log(palavra);\r\n        return palavra;\r\n    }\r\n\r\n    /**\r\n     * @description geração Aleatória de letras \r\n     * @returns {Char} \"c\"\r\n     */\r\n    geradorChar(value) {\r\n        console.log(\"olha só\");\r\n        var alfabeto = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\r\n        var conteudo = Array(value)\r\n        for (let index = 0; index < value; index++) {\r\n            conteudo[index] = alfabeto[Math.floor(Math.random() * alfabeto.length)];\r\n        }\r\n\r\n        for (let index = 0; index < conteudo.length; index++) {\r\n            if(this.gabarito != 0)conteudo[index] = this.gabarito[index];            \r\n        }\r\n        return conteudo;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}