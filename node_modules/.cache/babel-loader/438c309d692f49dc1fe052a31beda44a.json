{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EiC\\\\Documents\\\\William\\\\Caca_palavras\\\\src\\\\Componentes\\\\Board.js\";\nimport React from 'react';\nimport Cell from './Cell';\nimport Construtor from './Construtor';\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.teste = Array(100);\n    var Gerenciador = new Construtor(props);\n    this.state = {\n      gerenciador: Gerenciador,\n      gabarito: Gerenciador.geradorGabarito(props.colunas, props.linhas),\n      conteudo: Gerenciador.geradorChar(props.colunas * props.linhas)\n    };\n    console.log(this.state.conteudo);\n    console.log(this.state.gabarito);\n  }\n\n  eventoUpdate(c) {\n    console.log(this.state.gabarito[c]);\n    console.log(this.state.gabarito);\n    console.log(this.state.tentativas);\n    this.state.gabarito[c] = this.state.gabarito[c] === 0 ? this.state.conteudo[c] : 0;\n    console.log(this.state.gabarito[c]);\n    console.log(this.state.gabarito);\n    console.log(this.state.tentativas);\n  }\n  /**\r\n   * @description Função que gera os buttons de forma individual\r\n   * @param {int} j Quantidades de linhas do tabuleiro\r\n   * @param {int} i Quantidades de colunas do tabuleiro\r\n   * @returns {ElementDOM} <div><button>1</button></div>\r\n   */\n\n\n  renderCells(i, j) {\n    console.log(\"gerando celula\"); // {\"\"+i+j} conversão compactada para string\n\n    return React.createElement(Cell, {\n      value: this.state.conteudo[parseInt(\"\" + j + i)],\n      key: parseInt(\"\" + j + i),\n      onClick: () => {\n        this.eventoUpdate(parseInt(\"\" + j + i));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  }\n  /**\r\n   * @description Função que gera os buttons compositores das colunas da matriz\r\n   * @param {int} lin Quantidades de linhas do tabuleiro\r\n   * @param {int} col Quantidades de colunas do tabuleiro\r\n   * @returns {ElementDOM} <div><button>1</button><button>...</button><button>lin</button></div>\r\n   */\n\n\n  renderCol(col, lin) {\n    console.log(\"gerando colunas\");\n    var colBoard = [];\n\n    for (let index = 0; index < col; index++) {\n      colBoard.push(this.renderCells(index, lin));\n    }\n\n    return React.createElement('div', {\n      className: \"col-board\",\n      key: lin\n    }, colBoard);\n  }\n  /**\r\n   * @description Função que gera os a Matriz de buttons\r\n   * @param {int} lin Quantidades de linhas do tabuleiro\r\n   * @param {int} col Quantidades de colunas do tabuleiro\r\n   * @returns {ElementDOM} <div><button>1</button><button>...</button><button>lin</button></div><div><button>1</button><button>...</button><button>lin</button></div><div><button>1</button><button>...</button><button>lin</button></div>\r\n   */\n\n\n  renderBoard(col, lin) {\n    console.log(\"Gerando tabuleiro \" + lin);\n    var rowsBoard = [];\n\n    for (let index = 0; index < lin; index++) {\n      console.log(\"requendo coluna\");\n      rowsBoard.push(this.renderCol(col, index));\n    }\n\n    return React.createElement('div', {\n      className: \"main-board\"\n    }, rowsBoard);\n  }\n  /**\r\n   * \r\n   * @description Função que instância o tabuleiro como this.renderBoard(i,j) i - coluna e j- linhas\r\n   * @returns {ElementDOM} <div><button>1</button><button>...</button><button>lin</button></div><div><button>1</button><button>...</button><button>lin</button></div><div><button>1</button><button>...</button><button>lin</button></div>\r\n   */\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"titulo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Esse \\xE9 o tabuleiro\"), console.log(this.props.linhas), this.renderBoard(this.props.colunas, this.props.linhas));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/EiC/Documents/William/Caca_palavras/src/Componentes/Board.js"],"names":["React","Cell","Construtor","Board","Component","constructor","props","teste","Array","Gerenciador","state","gerenciador","gabarito","geradorGabarito","colunas","linhas","conteudo","geradorChar","console","log","eventoUpdate","c","tentativas","renderCells","i","j","parseInt","renderCol","col","lin","colBoard","index","push","createElement","className","key","renderBoard","rowsBoard","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Cell from './Cell';\r\nimport Construtor from'./Construtor';\r\n\r\nexport default class Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.teste = Array(100);\r\n        var Gerenciador = new Construtor(props);\r\n        this.state = {\r\n            gerenciador: Gerenciador,\r\n            gabarito: Gerenciador.geradorGabarito(props.colunas,props.linhas),\r\n            conteudo: Gerenciador.geradorChar(props.colunas*props.linhas)          \r\n            \r\n        };\r\n        console.log(this.state.conteudo);\r\n        console.log(this.state.gabarito);\r\n    }\r\n\r\n    eventoUpdate(c) {\r\n        console.log(this.state.gabarito[c]);\r\n        console.log(this.state.gabarito);\r\n        console.log(this.state.tentativas);\r\n        this.state.gabarito[c] = this.state.gabarito[c] === 0 ? this.state.conteudo[c] : 0;\r\n        console.log(this.state.gabarito[c]);\r\n        console.log(this.state.gabarito);\r\n        console.log(this.state.tentativas);\r\n    }\r\n\r\n    /**\r\n     * @description Função que gera os buttons de forma individual\r\n     * @param {int} j Quantidades de linhas do tabuleiro\r\n     * @param {int} i Quantidades de colunas do tabuleiro\r\n     * @returns {ElementDOM} <div><button>1</button></div>\r\n     */\r\n    renderCells(i, j) {\r\n        console.log(\"gerando celula\");\r\n        // {\"\"+i+j} conversão compactada para string\r\n        return <Cell\r\n            value={this.state.conteudo[parseInt(\"\" + j + i)]}\r\n            key={parseInt(\"\" + j + i)}\r\n            onClick={() => { this.eventoUpdate(parseInt(\"\" + j + i)) }}\r\n        />;\r\n    }\r\n\r\n    /**\r\n     * @description Função que gera os buttons compositores das colunas da matriz\r\n     * @param {int} lin Quantidades de linhas do tabuleiro\r\n     * @param {int} col Quantidades de colunas do tabuleiro\r\n     * @returns {ElementDOM} <div><button>1</button><button>...</button><button>lin</button></div>\r\n     */\r\n    renderCol(col, lin) {\r\n        console.log(\"gerando colunas\");\r\n        var colBoard = [];\r\n\r\n        for (let index = 0; index < col; index++) {\r\n            colBoard.push(this.renderCells(index, lin));\r\n        }\r\n        return React.createElement('div', { className: \"col-board\", key: lin }, colBoard);\r\n    }\r\n    /**\r\n     * @description Função que gera os a Matriz de buttons\r\n     * @param {int} lin Quantidades de linhas do tabuleiro\r\n     * @param {int} col Quantidades de colunas do tabuleiro\r\n     * @returns {ElementDOM} <div><button>1</button><button>...</button><button>lin</button></div><div><button>1</button><button>...</button><button>lin</button></div><div><button>1</button><button>...</button><button>lin</button></div>\r\n     */\r\n    renderBoard(col, lin) {\r\n        console.log(\"Gerando tabuleiro \" + lin);\r\n        var rowsBoard = [];\r\n        for (let index = 0; index < lin; index++) {\r\n            console.log(\"requendo coluna\");\r\n            rowsBoard.push(this.renderCol(col, index));\r\n        }\r\n        return React.createElement('div', { className: \"main-board\" }, rowsBoard);\r\n    }\r\n    /**\r\n     * \r\n     * @description Função que instância o tabuleiro como this.renderBoard(i,j) i - coluna e j- linhas\r\n     * @returns {ElementDOM} <div><button>1</button><button>...</button><button>lin</button></div><div><button>1</button><button>...</button><button>lin</button></div><div><button>1</button><button>...</button><button>lin</button></div>\r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"titulo\">Esse é o tabuleiro</div>\r\n                {console.log(this.props.linhas)}\r\n                {this.renderBoard(this.props.colunas, this.props.linhas)}\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}