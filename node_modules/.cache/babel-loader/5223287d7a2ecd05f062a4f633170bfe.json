{"ast":null,"code":"import React from 'react';\nimport Data from '../conteudo/palavras08102019';\nexport default class Construtor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.colunas = props.colunas;\n    this.linhas = props.linhas;\n    this.tentativas = this.vetorPosibilidades();\n    this.gabarito = Array(this.colunas * this.linhas).fill(0);\n    console.log(this.tentativas.sort());\n    console.log(this.gabarito);\n  }\n\n  criandoLevel(col, lin) {\n    this.state.colunas = col;\n    this.state.linhas = lin;\n  }\n\n  testOcupa(rot, possibilidade, palavra) {\n    var finalposicao;\n    var inicialposicao;\n\n    switch (rot) {\n      case 0:\n        //horizontal\n        finalposicao = palavra.length + possibilidade;\n        inicialposicao = possibilidade;\n        if (finalposicao > this.colunas * this.linhas) return true;\n\n        for (let index = inicialposicao; index < finalposicao; index++) if (this.gabarito[index] != 0 && this.gabarito[index] != palavra[index - possibilidade]) return true;\n\n        for (let index = inicialposicao, inpalavras = 0; index < finalposicao; index++, inpalavras++) {\n          this.gabarito[index] = palavra[inpalavras];\n        } //this.tentativas.pop();\n\n\n        console.log(\"horizontal \" + this.tentativas.length);\n        return false;\n        break;\n\n      case 1:\n        //vertical\n        finalposicao = palavra.length * this.colunas + possibilidade;\n        inicialposicao = possibilidade;\n        if (finalposicao > this.colunas * this.linhas) return true;\n\n        for (let index = inicialposicao; index < finalposicao; index += this.colunas) {\n          if (this.gabarito[index] != 0 && this.gabarito[index] != palavra[index - possibilidade]) return true;\n        }\n\n        for (let index = inicialposicao, inpalavras = 0; index < finalposicao; index += this.colunas, inpalavras++) {\n          this.gabarito[index] = palavra[inpalavras];\n        } //this.tentativas.pop();\n\n\n        console.log(\"vertical \" + this.tentativas.length);\n        return false;\n        break;\n\n      case 2:\n        //diagonal\n        return true;\n        break;\n\n      default:\n        console.log(\"Erro de rotação\");\n    } //Manter o loop\n\n\n    return true;\n  }\n\n  setPosicao(palavra, rot, possibilidade) {\n    var espaco;\n\n    switch (rot) {\n      case 0:\n        //horizontal\n        espaco = this.colunas - possibilidade % this.linhas;\n\n        if (palavra.length <= espaco) {\n          return this.testOcupa(rot, possibilidade, palavra);\n        }\n\n        break;\n\n      case 1:\n        //vertical\n        espaco = this.linhas - possibilidade / this.colunas;\n\n        if (palavra.length <= espaco) {\n          return this.testOcupa(rot, possibilidade, palavra);\n        }\n\n        break;\n\n      case 2:\n        //diagonal\n        break;\n\n      default:\n        console.log(\"Erro de rotação\");\n    } //Manter o loop\n\n\n    return true;\n  }\n\n  geradorGabarito() {\n    var palavra;\n    var possibilidade = 0;\n    var rot = -1;\n    var percorrer = 0;\n\n    for (let index = 0; index <= 4; index++) {\n      if (rot >= 2) rot = 0;else rot++;\n\n      do {\n        palavra = this.selecionarPalavras();\n        possibilidade = this.tentativas[this.tentativas.length - percorrer];\n        percorrer++;\n      } while (this.setPosicao(palavra, rot, possibilidade) == true && percorrer < this.tentativas.length);\n\n      console.log(\"index -------------------------------- \" + index + \" palavra \" + palavra + \" rot \" + rot + \" possibilidade \" + possibilidade);\n      percorrer = 0;\n    }\n\n    return this.gabarito;\n  }\n\n  vetorPosibilidades() {\n    var tam = this.colunas * this.linhas;\n    var posicoes = Array(tam);\n\n    for (let i = 0; i < tam; i++) posicoes[i] = i;\n\n    let aux = 0,\n        ind1,\n        ind2;\n\n    for (let i = 0; i < tam; i++) {\n      ind1 = Math.floor(Math.random() * tam);\n      ind2 = Math.floor(Math.random() * tam);\n      aux = posicoes[ind1];\n      posicoes[ind1] = posicoes[ind2];\n      posicoes[ind2] = aux;\n    }\n\n    return posicoes;\n  }\n\n  selecionarPalavras() {\n    var palavra;\n    var MAX = this.props.colunas;\n    var len = this.props.colunas + 1;\n    var index = 0;\n\n    while (len > MAX) {\n      palavra = Data[Math.floor(Math.random() * Data.length)][\"Resposta\"];\n      len = palavra[index].length;\n      index++;\n    }\n\n    return palavra;\n  }\n  /**\r\n   * @description geração Aleatória de letras \r\n   * @returns {Char} \"c\"\r\n   */\n\n\n  geradorChar(value) {\n    var alfabeto = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    var conteudo = Array(value);\n\n    for (let index = 0; index < value; index++) {\n      // conteudo[index] = alfabeto[Math.floor(Math.random() * alfabeto.length)];\n      conteudo[index] = \" \";\n    }\n\n    for (let index = 0; index < conteudo.length; index++) {\n      if (this.gabarito[index] != 0) conteudo[index] = this.gabarito[index];\n    }\n\n    return conteudo;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/EiC/Documents/William/Caca_palavras/src/Componentes/Construtor.js"],"names":["React","Data","Construtor","Component","constructor","props","colunas","linhas","tentativas","vetorPosibilidades","gabarito","Array","fill","console","log","sort","criandoLevel","col","lin","state","testOcupa","rot","possibilidade","palavra","finalposicao","inicialposicao","length","index","inpalavras","setPosicao","espaco","geradorGabarito","percorrer","selecionarPalavras","tam","posicoes","i","aux","ind1","ind2","Math","floor","random","MAX","len","geradorChar","value","alfabeto","conteudo"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Data from '../conteudo/palavras08102019';\r\nexport default class Construtor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.colunas = props.colunas;\r\n        this.linhas = props.linhas;\r\n        this.tentativas = this.vetorPosibilidades();\r\n        this.gabarito = Array(this.colunas * this.linhas).fill(0)\r\n        console.log(this.tentativas.sort());\r\n        console.log(this.gabarito);\r\n    }\r\n    criandoLevel(col, lin) {\r\n        this.state.colunas = col;\r\n        this.state.linhas = lin;\r\n    }\r\n\r\n    testOcupa(rot, possibilidade, palavra) {\r\n        var finalposicao;\r\n        var inicialposicao;\r\n        switch (rot) {\r\n            case 0:\r\n                //horizontal\r\n                finalposicao = palavra.length + possibilidade;\r\n                inicialposicao = possibilidade;\r\n                if (finalposicao > this.colunas * this.linhas) return true;\r\n\r\n                \r\n                for (let index = inicialposicao; index < finalposicao; index++) if (this.gabarito[index] != 0 && this.gabarito[index] != palavra[index - possibilidade]) return true;\r\n\r\n\r\n                for (let index = inicialposicao, inpalavras = 0; index < finalposicao; index++, inpalavras++) {\r\n                    this.gabarito[index] = palavra[inpalavras];\r\n                }\r\n                //this.tentativas.pop();\r\n                console.log(\"horizontal \"+this.tentativas.length);\r\n                return false;\r\n\r\n\r\n                break;\r\n            case 1:\r\n                //vertical\r\n                finalposicao = (palavra.length * this.colunas) + possibilidade;\r\n                inicialposicao = possibilidade;\r\n                if (finalposicao > this.colunas * this.linhas) return true;\r\n                for (let index = inicialposicao; index < finalposicao; index += this.colunas) {\r\n                    if (this.gabarito[index] != 0 && this.gabarito[index] != palavra[index - possibilidade]) return true;\r\n                }\r\n            \r\n                for (let index = inicialposicao, inpalavras = 0; index < finalposicao; index += this.colunas, inpalavras++) {\r\n                    this.gabarito[index] = palavra[inpalavras];\r\n                }\r\n                //this.tentativas.pop();\r\n                console.log(\"vertical \"+this.tentativas.length);\r\n                return false;\r\n                \r\n                break;\r\n            case 2:\r\n                //diagonal\r\n                return true\r\n                break;\r\n            default:\r\n                console.log(\"Erro de rotação\");\r\n\r\n        }\r\n        \r\n        //Manter o loop\r\n        return true;\r\n    }\r\n\r\n    setPosicao(palavra, rot, possibilidade) {\r\n        var espaco;\r\n        switch (rot) {\r\n            case 0:\r\n                //horizontal\r\n                espaco = this.colunas - possibilidade % this.linhas;\r\n\r\n                if (palavra.length <= espaco) {\r\n\r\n                    return this.testOcupa(rot, possibilidade, palavra);\r\n\r\n                }\r\n                break;\r\n            case 1:\r\n                //vertical\r\n                espaco = this.linhas - possibilidade / this.colunas;\r\n\r\n                if (palavra.length <= espaco) {\r\n\r\n                    return this.testOcupa(rot, possibilidade, palavra);\r\n\r\n                }\r\n                break;\r\n            case 2:\r\n                //diagonal\r\n                break;\r\n            default:\r\n                console.log(\"Erro de rotação\");\r\n\r\n\r\n        }\r\n        //Manter o loop\r\n        return true;\r\n\r\n    }\r\n    geradorGabarito() {\r\n        var palavra;\r\n        var possibilidade = 0;\r\n        var rot = -1;\r\n        var percorrer = 0;\r\n\r\n        for (let index = 0; index <= 4; index++) {\r\n            if (rot >= 2) rot = 0;\r\n            else rot++;\r\n            do {\r\n                palavra = this.selecionarPalavras();\r\n                \r\n                possibilidade = this.tentativas[this.tentativas.length - percorrer];\r\n                percorrer++;\r\n            } while (this.setPosicao(palavra, rot, possibilidade) == true && percorrer < this.tentativas.length);\r\n            console.log(\"index -------------------------------- \" + index+ \" palavra \"+ palavra+\" rot \"+ rot +\" possibilidade \"+possibilidade);\r\n            percorrer = 0;\r\n        }\r\n        return this.gabarito;\r\n    }\r\n\r\n    vetorPosibilidades() {\r\n        var tam = this.colunas * this.linhas;\r\n        var posicoes = Array(tam);\r\n        for (let i = 0; i < tam; i++) posicoes[i] = i;\r\n        let aux = 0, ind1, ind2;\r\n        for (let i = 0; i < tam; i++) {\r\n            ind1 = Math.floor(Math.random() * tam);\r\n            ind2 = Math.floor(Math.random() * tam);\r\n            aux = posicoes[ind1];\r\n            posicoes[ind1] = posicoes[ind2];\r\n            posicoes[ind2] = aux;\r\n        }\r\n        return posicoes;\r\n    }\r\n\r\n\r\n    selecionarPalavras() {\r\n        var palavra;\r\n        var MAX = this.props.colunas;\r\n        var len = this.props.colunas + 1;\r\n        var index = 0;\r\n        while (len > MAX) {\r\n            palavra = Data[Math.floor(Math.random() * Data.length)][\"Resposta\"];\r\n            len = palavra[index].length;\r\n            index++;\r\n        }\r\n\r\n        return palavra;\r\n    }\r\n\r\n    /**\r\n     * @description geração Aleatória de letras \r\n     * @returns {Char} \"c\"\r\n     */\r\n    geradorChar(value) {\r\n        var alfabeto = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\r\n        var conteudo = Array(value);\r\n        for (let index = 0; index < value; index++) {\r\n           // conteudo[index] = alfabeto[Math.floor(Math.random() * alfabeto.length)];\r\n            conteudo[index] = \" \";\r\n        }\r\n\r\n        for (let index = 0; index < conteudo.length; index++) {\r\n            if (this.gabarito[index] != 0) conteudo[index] = this.gabarito[index];\r\n        }\r\n        return conteudo;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}