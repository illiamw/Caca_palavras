{"ast":null,"code":"import React from 'react';\nimport Data from '../conteudo/palavras08102019';\nexport default class Construtor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.colunas = props.colunas;\n    this.linhas = props.linhas;\n    this.tentativas = this.vetorPosibilidades();\n    this.gabarito = Array(this.colunas * this.linhas).fill(0);\n    console.log(this.tentativas);\n    console.log(this.gabarito);\n  }\n\n  criandoLevel(col, lin) {\n    this.state.colunas = col;\n    this.state.linhas = lin;\n  }\n\n  testOcupa(rot, possibilidade, palavra) {\n    switch (rot) {\n      case 0:\n        //horizontal\n        let espaco = this.colunas - possibilidade % this.linhas;\n        let finalposicao = espaco + possibilidade;\n        let inicialposicao = possibilidade;\n\n        for (let index = 0; inicialposicao < finalposicao; index++) if (this.gabarito[index + inicialposicao] != 0) return false;\n\n        for (let index = 0; inicialposicao < finalposicao; index++) {\n          this.gabarito[index + inicialposicao] = palavra[index];\n        }\n\n        console.log(\"------------------------ Colocou -------------------------\");\n        break;\n\n      case 1:\n        //vertical\n        break;\n\n      case 2:\n        //diagonal\n        break;\n\n      default:\n        console.log(\"Erro de rotação\"); //Manter o loop\n\n        return true;\n    }\n  }\n\n  setPosicao(palavra, rot, possibilidade) {\n    switch (rot) {\n      case 0:\n        //horizontal\n        let espaco = this.colunas - possibilidade % this.linhas;\n        console.log(rot + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa col \" + this.colunas + \"  possibilidade \" + possibilidade + \"  lin \" + this.linhas + \"  esp \" + espaco);\n\n        if (palavra.length <= espaco) {\n          console.log(\"cabe \" + palavra.length);\n          this.testOcupa(rot, possibilidade, palavra);\n          return false;\n        }\n\n        break;\n\n      case 1:\n        //vertical\n        break;\n\n      case 2:\n        //diagonal\n        break;\n\n      default:\n        console.log(\"Erro de rotação\"); //Manter o loop\n\n        return true;\n    }\n\n    for (let index = 0; index < this.tentativas.length; index++) {}\n  }\n\n  geradorGabarito() {\n    var palavra;\n    var possibilidade = 0;\n    var rot = -1;\n    var percorrer = 0;\n\n    for (let index = 0; index < 6; index++) {\n      do {\n        palavra = this.selecionarPalavras();\n        if (rot > 2) rot = 0;else rot++;\n        possibilidade = this.tentativas[percorrer];\n        percorrer++;\n        console.log(\"loop\");\n      } while (this.setPosicao(palavra, rot, possibilidade));\n    }\n\n    console.log(this.gabarito);\n  }\n\n  vetorPosibilidades() {\n    var tam = this.colunas * this.linhas;\n    console.log(this.linhas);\n    var posicoes = Array(tam);\n\n    for (let i = 0; i < tam; i++) posicoes[i] = i;\n\n    let aux = 0,\n        ind1,\n        ind2;\n\n    for (let i = 0; i < tam; i++) {\n      ind1 = Math.floor(Math.random() * tam);\n      ind2 = Math.floor(Math.random() * tam);\n      aux = posicoes[ind1];\n      posicoes[ind1] = posicoes[ind2];\n      posicoes[ind2] = aux;\n    }\n\n    console.log(posicoes);\n    return posicoes;\n  }\n\n  selecionarPalavras() {\n    console.log(this.props.colunas);\n    var palavra;\n    var MAX = this.props.colunas;\n    var len = this.props.colunas + 1;\n    var index = 0;\n\n    while (len > MAX) {\n      palavra = Data[Math.floor(Math.random() * Data.length)][\"Resposta\"];\n      len = palavra[index].length;\n      index++;\n    }\n\n    console.log(palavra);\n    return palavra;\n  }\n  /**\r\n   * @description geração Aleatória de letras \r\n   * @returns {Char} \"c\"\r\n   */\n\n\n  geradorChar(value) {\n    console.log(\"olha só\");\n    var alfabeto = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    var conteudo = Array(value);\n\n    for (let index = 0; index < value; index++) {\n      conteudo[index] = alfabeto[Math.floor(Math.random() * alfabeto.length)];\n    }\n\n    return conteudo;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/EIC/Documents/Caca_palavras/src/Componentes/Construtor.js"],"names":["React","Data","Construtor","Component","constructor","props","colunas","linhas","tentativas","vetorPosibilidades","gabarito","Array","fill","console","log","criandoLevel","col","lin","state","testOcupa","rot","possibilidade","palavra","espaco","finalposicao","inicialposicao","index","setPosicao","length","geradorGabarito","percorrer","selecionarPalavras","tam","posicoes","i","aux","ind1","ind2","Math","floor","random","MAX","len","geradorChar","value","alfabeto","conteudo"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Data from '../conteudo/palavras08102019';\r\nexport default class Construtor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.colunas = props.colunas;\r\n        this.linhas = props.linhas;\r\n        this.tentativas = this.vetorPosibilidades();\r\n        this.gabarito = Array(this.colunas * this.linhas).fill(0)\r\n        console.log(this.tentativas);\r\n        console.log(this.gabarito);\r\n    }\r\n    criandoLevel(col, lin) {\r\n        this.state.colunas = col;\r\n        this.state.linhas = lin;\r\n    }\r\n\r\n    testOcupa(rot,possibilidade,palavra){\r\n        switch (rot) {\r\n            case 0:\r\n                //horizontal\r\n                \r\n                let espaco = this.colunas - possibilidade % this.linhas;\r\n                let finalposicao = espaco + possibilidade;\r\n                let inicialposicao = possibilidade;\r\n                for (let index = 0; inicialposicao < finalposicao; index++) if(this.gabarito[index+inicialposicao] != 0) return false;                    \r\n                for (let index = 0; inicialposicao < finalposicao; index++) {\r\n                    this.gabarito[index+inicialposicao] = palavra[index]\r\n                }\r\n                console.log(\"------------------------ Colocou -------------------------\");\r\n\r\n                break;\r\n            case 1:\r\n                //vertical\r\n                break;\r\n            case 2:\r\n                //diagonal\r\n                break;\r\n            default:\r\n                console.log(\"Erro de rotação\");\r\n\r\n                //Manter o loop\r\n                return true;\r\n\r\n        }\r\n    }\r\n\r\n    setPosicao(palavra, rot, possibilidade) {\r\n        switch (rot) {\r\n            case 0:\r\n                //horizontal\r\n                let espaco = this.colunas - possibilidade % this.linhas;\r\n                console.log(rot + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa col \" + this.colunas + \"  possibilidade \" + possibilidade + \"  lin \" + this.linhas + \"  esp \" + espaco);\r\n\r\n                if (palavra.length <= espaco) {\r\n                    console.log(\"cabe \"+ palavra.length);\r\n                    this.testOcupa(rot,possibilidade,palavra);\r\n                    return false;\r\n                    \r\n                }\r\n                break;\r\n            case 1:\r\n                //vertical\r\n                break;\r\n            case 2:\r\n                //diagonal\r\n                break;\r\n            default:\r\n                console.log(\"Erro de rotação\");\r\n\r\n                //Manter o loop\r\n                return true;\r\n\r\n        }\r\n        for (let index = 0; index < this.tentativas.length; index++) {\r\n\r\n        }\r\n    }\r\n    geradorGabarito() {\r\n        var palavra;\r\n        var possibilidade = 0;\r\n        var rot = -1;\r\n        var percorrer = 0;\r\n\r\n        for (let index = 0; index < 6; index++) {\r\n            do {\r\n                palavra = this.selecionarPalavras();\r\n                if (rot > 2) rot = 0;\r\n                else rot++;\r\n                possibilidade = this.tentativas[percorrer];\r\n                percorrer++;\r\n                console.log(\"loop\");\r\n            } while (this.setPosicao(palavra, rot, possibilidade));\r\n\r\n        }\r\n        console.log(this.gabarito);\r\n    }\r\n\r\n    vetorPosibilidades() {\r\n        var tam = this.colunas * this.linhas;\r\n        console.log(this.linhas);\r\n        var posicoes = Array(tam);\r\n        for (let i = 0; i < tam; i++) posicoes[i] = i;\r\n        let aux = 0, ind1, ind2;\r\n        for (let i = 0; i < tam; i++) {\r\n            ind1 = Math.floor(Math.random() * tam);\r\n            ind2 = Math.floor(Math.random() * tam);\r\n            aux = posicoes[ind1];\r\n            posicoes[ind1] = posicoes[ind2];\r\n            posicoes[ind2] = aux;\r\n        }\r\n        console.log(posicoes);\r\n        return posicoes;\r\n    }\r\n\r\n\r\n    selecionarPalavras() {\r\n        console.log(this.props.colunas);\r\n        var palavra;\r\n        var MAX = this.props.colunas;\r\n        var len = this.props.colunas + 1;\r\n        var index = 0;\r\n        while (len > MAX) {\r\n            palavra = Data[Math.floor(Math.random() * Data.length)][\"Resposta\"];\r\n            len = palavra[index].length;\r\n            index++;\r\n        }\r\n\r\n        console.log(palavra);\r\n        return palavra;\r\n    }\r\n\r\n    /**\r\n     * @description geração Aleatória de letras \r\n     * @returns {Char} \"c\"\r\n     */\r\n    geradorChar(value) {\r\n        console.log(\"olha só\");\r\n        var alfabeto = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\r\n        var conteudo = Array(value)\r\n        for (let index = 0; index < value; index++) {\r\n            conteudo[index] = alfabeto[Math.floor(Math.random() * alfabeto.length)];\r\n        }\r\n        return conteudo;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}