{"ast":null,"code":"import React from 'react';\nimport Data from '../conteudo/palavras08102019';\nexport default class Construtor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.colunas = props.colunas;\n    this.linhas = props.linhas;\n    this.tentativas = this.vetorPosibilidades();\n    this.gabarito = Array(this.colunas * this.linhas);\n    console.log(this.tentativas);\n  }\n\n  criandoLevel(col, lin) {\n    this.state.colunas = col;\n    this.state.linhas = lin;\n  }\n\n  setPosicao(palavra, rot, possibilidade) {\n    switch (rot) {\n      case 0:\n        //horizontal\n        let espaco = this.colunas - possibilidade % this.linhas;\n        console.log(espaco); //if()\n\n        break;\n\n      case 1:\n        //vertical\n        break;\n\n      case 2:\n        //diagonal\n        break;\n\n      default:\n        console.log(\"Erro de rotação\");\n    }\n\n    for (let index = 0; index < this.tentativas.length; index++) {}\n  }\n\n  geradorGabarito() {\n    var palavra;\n    var possibilidade = 0;\n    var rot = 0;\n\n    for (let index = 0; index < 6; index++) {\n      do {\n        palavra = this.selecionarPalavras();\n        if (rot > 2) rot = 0;else rot++;\n        possibilidade++;\n      } while (this.setPosicao(palavra, rot, possibilidade));\n    }\n  }\n\n  vetorPosibilidades() {\n    var tam = this.colunas * this.linhas;\n    console.log(this.linhas);\n    var posicoes = Array(tam);\n\n    for (let i = 0; i < tam; i++) posicoes[i] = i;\n\n    let aux = 0,\n        ind1,\n        ind2;\n\n    for (let i = 0; i < tam; i++) {\n      ind1 = Math.floor(Math.random() * tam);\n      ind2 = Math.floor(Math.random() * tam);\n      aux = posicoes[ind1];\n      posicoes[ind1] = posicoes[ind2];\n      posicoes[ind2] = aux;\n    }\n\n    console.log(posicoes);\n    return posicoes;\n  }\n\n  selecionarPalavras() {\n    console.log(this.props.colunas);\n    var palavra;\n    var MAX = this.props.colunas;\n    var len = this.props.colunas + 1;\n    var index = 0;\n\n    while (len > MAX) {\n      palavra = Data[Math.floor(Math.random() * Data.length)][\"Resposta\"];\n      len = palavra[index].length;\n      index++;\n    }\n\n    console.log(palavra);\n    return palavra;\n  }\n  /**\r\n   * @description geração Aleatória de letras \r\n   * @returns {Char} \"c\"\r\n   */\n\n\n  geradorChar(value) {\n    console.log(\"olha só\");\n    var alfabeto = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    var conteudo = Array(value);\n\n    for (let index = 0; index < value; index++) {\n      conteudo[index] = alfabeto[Math.floor(Math.random() * alfabeto.length)];\n    }\n\n    return conteudo;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/EIC/Documents/Caca_palavras/src/Componentes/Construtor.js"],"names":["React","Data","Construtor","Component","constructor","props","colunas","linhas","tentativas","vetorPosibilidades","gabarito","Array","console","log","criandoLevel","col","lin","state","setPosicao","palavra","rot","possibilidade","espaco","index","length","geradorGabarito","selecionarPalavras","tam","posicoes","i","aux","ind1","ind2","Math","floor","random","MAX","len","geradorChar","value","alfabeto","conteudo"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Data from '../conteudo/palavras08102019';\r\nexport default class Construtor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.colunas = props.colunas;\r\n        this.linhas = props.linhas;\r\n        this.tentativas = this.vetorPosibilidades();\r\n        this.gabarito  = Array(this.colunas * this.linhas)\r\n        console.log(this.tentativas);\r\n    }\r\n    criandoLevel(col, lin) {\r\n        this.state.colunas = col;\r\n        this.state.linhas = lin;\r\n    }\r\n\r\n    setPosicao(palavra, rot, possibilidade) {\r\n        switch(rot){\r\n            case 0:\r\n                //horizontal\r\n                let espaco = this.colunas - possibilidade%this.linhas;\r\n                console.log(espaco);\r\n                //if()\r\n                break;\r\n\r\n            case 1:\r\n                //vertical\r\n                break;\r\n            case 2:\r\n                //diagonal\r\n                break;\r\n            default:\r\n                console.log(\"Erro de rotação\");\r\n\r\n        }\r\n        for (let index = 0; index < this.tentativas.length; index++) {\r\n                        \r\n        }\r\n    }\r\n    geradorGabarito() {       \r\n        var palavra;\r\n        var possibilidade = 0;\r\n        var rot=0;\r\n\r\n        for (let index = 0; index < 6; index++) {\r\n            do {\r\n                palavra = this.selecionarPalavras();\r\n                if(rot>2) rot = 0;\r\n                else rot++;\r\n                possibilidade++;\r\n            } while (this.setPosicao(palavra, rot, possibilidade));\r\n\r\n        }\r\n    }\r\n\r\n    vetorPosibilidades() {\r\n        var tam = this.colunas*this.linhas;\r\n        console.log(this.linhas);\r\n        var posicoes = Array(tam);\r\n        for (let i = 0; i < tam; i++) posicoes[i] = i;\r\n        let aux = 0, ind1, ind2;\r\n        for (let i = 0; i < tam; i++) {\r\n            ind1 = Math.floor(Math.random() * tam);\r\n            ind2 = Math.floor(Math.random() * tam);\r\n            aux = posicoes[ind1];\r\n            posicoes[ind1] = posicoes[ind2];\r\n            posicoes[ind2] = aux;\r\n        }\r\n        console.log(posicoes);\r\n        return posicoes;\r\n    }\r\n\r\n\r\n    selecionarPalavras() {\r\n        console.log(this.props.colunas);\r\n        var palavra;\r\n        var MAX = this.props.colunas;\r\n        var len = this.props.colunas + 1;\r\n        var index=0;\r\n        while (len > MAX) {\r\n            palavra = Data[Math.floor(Math.random() * Data.length)][\"Resposta\"];\r\n            len = palavra[index].length;\r\n            index++;\r\n        }\r\n\r\n        console.log(palavra);\r\n        return palavra;\r\n    }\r\n\r\n    /**\r\n     * @description geração Aleatória de letras \r\n     * @returns {Char} \"c\"\r\n     */\r\n    geradorChar(value) {\r\n        console.log(\"olha só\");\r\n        var alfabeto = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\r\n        var conteudo = Array(value)\r\n        for (let index = 0; index < value; index++) {\r\n            conteudo[index] = alfabeto[Math.floor(Math.random() * alfabeto.length)];\r\n        }\r\n        return conteudo;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}